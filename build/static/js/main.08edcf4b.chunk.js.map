{"version":3,"sources":["components/total/Total.js","components/history/HistoryItem.js","components/history/History.js","components/operation/Operation.js","App.js","index.js"],"names":["Total","resultIncome","resultExpenses","totalBalance","className","HistoryItem","transaction","deleteTransaction","add","description","amount","onClick","id","History","transactions","map","item","key","Operation","addTransaction","addDescription","addAmount","onChange","type","placeholder","value","pattern","App","state","JSON","parse","localStorage","getItem","push","Date","toString","setState","getTotalBalance","e","target","plusHandler","acc","curVal","getIncome","filter","reduce","Number","getExpenses","addStorage","setItem","stringify","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08edcf4b.chunk.js","sourcesContent":["import React from 'react'; //is loaded from 'node_modules'\n\nconst Total = ({ resultIncome, resultExpenses, totalBalance }) => (\n    <section className=\"total\">\n        <header className=\"total__header\">\n            <h3>Баланс</h3>\n            <p className=\"total__balance\">{totalBalance} ₽</p>\n        </header>\n        <div className=\"total__main\">\n            <div className=\"total__main-item total__income\">\n                <h4>Доходы</h4>\n                <p className=\"total__money total__money-income\">\n                    +{resultIncome} ₽\n            </p>\n            </div>\n            <div className=\"total__main-item total__expenses\">\n                <h4>Расходы</h4>\n                <p className=\"total__money total__money-expenses\">\n                    -{resultExpenses} ₽\n            </p>\n            </div>\n        </div>\n    </section>\n);\n\nexport default Total;\n\n","import React from 'react';\n\nconst HistoryItem = ({ transaction, deleteTransaction }) => (\n    <li className={`history__item ${transaction.add ? 'history__item-plus' : 'history__item-minus'}`}>{transaction.description}\n        <span className=\"history__money\">{transaction.amount} ₽</span>\n        <button className=\"history__delete\" onClick={() => deleteTransaction(transaction.id)}>x</button>\n    </li>\n\n\n);\n\nexport default HistoryItem;\n","import React from 'react';\nimport HistoryItem from './HistoryItem';\n\nconst History = ({ transactions, deleteTransaction }) => (\n    <section className=\"history\">\n        <h3>История расходов</h3>\n        <ul className=\"history__list\">\n            {transactions.map((item) => <HistoryItem transaction={item} key={item.id} deleteTransaction={deleteTransaction} />)}\n        </ul>\n    </section>\n);\n\nexport default History;","import React from 'react';\n\nconst Operation = ({ addTransaction, addDescription, addAmount, description, amount }) => (\n    <section className=\"operation\">\n        <h3>Новая операция</h3>\n        <form id=\"form\">\n            <label>\n                <input onChange={addDescription}\n                    type=\"text\"\n                    className=\"operation__fields operation__name\"\n                    placeholder=\"Наименование операции\"\n                    value={description}>\n                    \n                </input>\n            </label>\n            <label>\n                <input onChange={addAmount}\n                    type=\"number\"\n                    className=\"operation__fields operation__amount\"\n                    placeholder=\"Введите сумму\"\n                    value={amount} \n                    pattern={[0-9]}>\n                    \n                </input>\n            </label>\n            <div className=\"operation__btns\">\n                <button onClick={() => addTransaction(false)} type=\"button\" className=\"operation__btn operation__btn-subtract\">РАСХОД</button>\n                <button onClick={() => addTransaction(true)} type=\"button\" className=\"operation__btn operation__btn-add\">ДОХОД</button>\n            </div>\n        </form>\n    </section>\n);\n\nexport default Operation;\n","import React, { Component } from 'react';\nimport Total from './components/total/Total'; //During import, you can use other random names for imported components (e.g. import Something from '';), React will still understand that you mean 'Total'; But it will only work for default exported components;\n//In order to import a function which is written within some component, you can write: 'import {function} from ''; - moreover, you can re-import and work with functions written for one component for other components as well;\nimport History from './components/history/History';\nimport Operation from './components/operation/Operation';\n\n\nclass App extends Component {    //we transformed App function into the class in order to use it for storing Component's STATE; It doesn't return anything but renders stuff, so we use the render() method; but we still need 'return' within this render() method; render() is one of the Component's life cycles;\n\n  state = { //we create and store data within this state; this writing style is equal writing a classical constructor syntax; it's modern and can be used even outside React in Vanilla JS projects;\n    transactions: JSON.parse(localStorage.getItem('calcMoney')) || [],\n    description: '',\n    amount: '',\n    resultIncome: 0,\n    resultExpenses: 0,\n    totalBalance: 0,\n  }\n\n  componentWillMount() { //this method helps us update totalBalance before any other operation took place;\n    this.getTotalBalance(); //this is to ensure that after the page is updated, calculations could still happen and get rendered on a page;\n  }\n\n  componentDidUpdate() { // you can't put state or state updating function here;s\n     this.addStorage();\n  } //this function puts data into local storage; \n\n  addTransaction = (add) => {\n    const transactions = [...this.state.transactions];\n\n    transactions.push({\n      id: `cmr${(+new Date()).toString(16)}`, /*'+' is used to convert Date object into Number in ms (that count from 1970);(16) converts regular number into hexadecimal number; */\n      description: this.state.description,\n      amount: this.state.amount,\n      add\n    });\n\n    this.setState({\n      transactions,\n      description: '',\n      amount: '',\n    }, this.getTotalBalance()); //this callback function generates total balance; it will be invoked after the global state is updated;\n  }\n\n  addDescription = (e) => { //it's a method described in the App class component, so we don't need 'const';\n    this.setState({ description: e.target.value }); //works asynchronously;\n  }\n\n  addAmount = (e) => { //arrow function doesn't have its own 'this', so it refers to the external global 'this'; \n    this.setState({ amount: e.target.value }); //works asynchronously;\n  }\n\n  plusHandler = (acc, curVal) => {\n    return acc + curVal;\n  };\n\n\n  getIncome = () => {\n    return this.state.transactions.filter((item) => item.add)\n      .reduce((acc, item) => acc + Number(item.amount), 0);\n  }\n\n  getExpenses = () => {\n    return this.state.transactions.filter((item) => !item.add)\n      .reduce((acc, item) => acc + Number(item.amount), 0);\n  }\n\n  getTotalBalance = () => {\n    const resultIncome = this.getIncome();\n    const resultExpenses = this.getExpenses();\n\n    const totalBalance = resultIncome - resultExpenses;\n\n    this.setState({ resultIncome, resultExpenses, totalBalance });\n  }\n\n  addStorage = () => {\n    localStorage.setItem('calcMoney', JSON.stringify(this.state.transactions));\n  }\n\n  deleteTransaction = (key) => {\n    const transactions = this.state.transactions.filter(item => item.id !== key);\n    this.setState({ transactions }, this.getTotalBalance());\n  }\n\n  render() {\n\n    return (\n      <>\n        <header>\n          <h1>Кошелек</h1>\n          <h2>Калькулятор расходов</h2>\n        </header>\n        <main>\n          <div className=\"container\">\n            <Total resultIncome={this.state.resultIncome}\n              resultExpenses={this.state.resultExpenses}\n              totalBalance={this.state.totalBalance} />\n            <History transactions={this.state.transactions}\n            deleteTransaction={this.deleteTransaction} />\n            <Operation\n              addTransaction={this.addTransaction}\n              addAmount={this.addAmount}\n              addDescription={this.addDescription}\n              description={this.state.description}\n              amount={this.state.amount} />\n          </div>\n        </main>\n      </>\n    );\n  }\n}\n//<React.Fragment> React element can be used instead of <div> as the main  wrapper to optimize the output DOM tree;\n//In result, the html will look like <div id=\"root\"> <header> <h1 /> <header /> <main /> etc.\n//Moreover, you can use <React.Fragment> in empty brackets - <> </>;\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './normalize.css';\nimport './style.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}